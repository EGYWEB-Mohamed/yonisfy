{"componentChunkName":"component---src-templates-docs-js","path":"/udacity/style-guide/javascript","result":{"data":{"site":{"siteMetadata":{"title":"Yonisfy","docsLocation":"https://github.com/mohammedelzanaty/yonisfy.git","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"c3478c7d-4fc1-5a27-b13f-53b08cb05dbb","title":"Udacity Javascript Style Guide","slug":"/udacity/style-guide/javascript"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Udacity Javascript Style Guide\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"General Formatting Rules\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Trailing Whitespace\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Remove trailing white spaces.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Trailing white spaces are unnecessary and can complicate diffs.\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#cd0e3e\"\n    }\n  }, \"Not Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const name = \\\"John Smith\\\";\\n__;\\n\")), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const name = \\\"John Smith\\\";\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If using Sublime Text, this can be done automatically each time you save a file by adding the following to your User Settings JSON file (you should be able to find this within Sublime Text's menu):\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"trim_trailing_white_space_on_save\\\": true\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Indentation\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Indentation should be consistent throughout the entire file. Whether you choose to use tabs or spaces, or 2-spaces vs. 4-spaces - just be consistent!\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"General Meta Rules\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Encoding\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use UTF-8 (no BOM).\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Make sure your editor uses UTF-8 as character encoding, without a byte order mark.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Comments\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use comments to explain code: What does it cover, what purpose does it serve, and why is the respective solution used or preferred?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can optionally document your JavaScript functions with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://usejsdoc.org\"\n  }, \"JSDoc\"), \", a documentation generator and standard for writing code comments. Its benefits include providing a specification to hold your comments to, and the command line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsdoc\"), \" tool that will generate a website for your documentation. JSDoc provides many annotations you can use to document your code, but we only recommend that you utilize a small subset of the available options:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://usejsdoc.org/tags-class.html\"\n  }, \"@constructor\"), \": used to document a class, a.k.a. a function meant to be called with the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"new\"), \" keyword.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://usejsdoc.org/tags-description.html\"\n  }, \"@description\"), \": used to describe your function; this tag allows you to include HTML markup if desired as well.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://usejsdoc.org/tags-param.html\"\n  }, \"@param\"), \": used to describe the name, type, and description of a function parameter.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://usejsdoc.org/tags-returns.html\"\n  }, \"@returns\"), \": document the type and description of a function's return value.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This example shows how to document a class constructor (note the use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/**\"), \" to start the comment block; that's important):\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"/**\\n* @description Represents a book\\n* @constructor\\n* @param {string} title - The title of the book\\n* @param {string} author - The author of the book\\n*/\\nfunction Book(title, author) {\\n    ...\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"And here is a function with parameters that returns a value; note the lack of description for the parameters, since in this case they're pretty self-explanatory:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"/**\\n * @description Adds two numbers\\n * @param {number} a\\n * @param {number} b\\n * @returns {number} Sum of a and b\\n */\\nfunction sum(a, b) {\\n  return a + b;\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Feel free to go above and beyond and use more annotations if desired.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Action Items\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Mark todos and action items with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TODO:\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Highlight todos by using the keyword \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TODO\"), \" only, not other formats like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@@\"), \". Append action items after a colon like this: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TODO: action item\"), \".\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"// TODO: add other fruits\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"JavaScript Language Rules\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Variable Declaration\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There are three ways to declare a variable in JavaScript:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[const](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[let](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[var](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var)\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When declaring variables, you should declare them using the keywords in the order listed above. Declare your variables with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const\"), \", first. If you find that you need to reassign the variable later, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let\"), \". There isn't a good reason to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" keyword anymore for variable declaration.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Semicolons\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Always use semicolons.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Relying on implicit insertion can cause subtle, hard to debug problems. Semicolons should be included at the end of function expressions, but not at the end of function declarations.\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#cd0e3e\"\n    }\n  }, \"Not Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const foo = () => {\\n  return true; // Missing semicolon\\n}; // Missing semicolon\\n\\nfunction foo() {\\n  return true;\\n} // Extra semicolon\\n\")), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const foo = () => {\\n  return true;\\n};\\n\\nfunction foo() {\\n  return true;\\n}\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Wrapper Objects for Primitive Types\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There's no reason to use wrapper objects for primitive types, plus they're dangerous. However, type casting is okay.\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#cd0e3e\"\n    }\n  }, \"Not Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const x = new Boolean(0);\\nif (x) {\\n  alert(\\\"hi\\\"); // Shows 'hi' because typeof x is truthy object\\n}\\n\")), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const x = Boolean(false);\\nif (x) {\\n  alert(\\\"hi\\\"); // Show 'hi' because typeof x is a falsey boolean\\n}\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Closures\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Yes, but be careful.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The ability to create closures is perhaps the most useful and often overlooked feature in JavaScript. One thing to keep in mind, however, is that a closure keeps a pointer to its enclosing scope. As a result, attaching a closure to a DOM element can create a circular reference and thus, a memory leak.\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#cd0e3e\"\n    }\n  }, \"Not Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"function foo(element, a, b) {\\n  element.onclick = function () {\\n    /* uses a and b */\\n  };\\n}\\n\")), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"function foo(element, a, b) {\\n  element.onclick = bar(a, b);\\n}\\n\\nfunction bar(a, b) {\\n  return function () {\\n    /* uses a and b */\\n  };\\n}\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"for, for-in and forEach\")), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"Array\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"forEach\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for\"), \" loops are preferred over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for-in\"), \" loops when iterating over an array.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"#\", mdx(\"h4\", {\n    style: {\n      \"color\": \"#cd0e3e\"\n    }\n  }, \"Not Recommended\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"myArray = [\\\"a\\\", 1, \\\"etc\\\"];\\nfor (const indexNum in myArray) {\\n  console.log(myArray[indexNum]);\\n}\\n\\nconst starWars = {\\n  creatures: [\\n    {\\n      name: \\\"bantha\\\",\\n      face: \\\"furry\\\",\\n    },\\n    {\\n      name: \\\"loth-cat\\\",\\n      face: \\\"toothy\\\",\\n    },\\n  ],\\n};\\nfor (const i in starWars.creatures) {\\n  console.log(starWars.creatures[i].name);\\n  console.log(starWars.creatures[i].face);\\n}\\n\")), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"mySimpleArray = [\\\"a\\\", 1, \\\"etc\\\"];\\nmySimpleArray.forEach(function (val) {\\n  console.log(val);\\n});\\n\\nconst starWars = {\\n  creatures: [\\n    {\\n      name: \\\"bantha\\\",\\n      face: \\\"furry\\\",\\n    },\\n    {\\n      name: \\\"loth-cat\\\",\\n      face: \\\"toothy\\\",\\n    },\\n  ],\\n};\\nstarWars.creatures.forEach(function (creature) {\\n  console.log(creature.name);\\n  console.log(creature.face);\\n});\\n\\n// or\\n\\nmyArray = [\\\"a\\\", 1, \\\"etc\\\"];\\nfor (let indexCount = 0; indexCount < myArray.length; indexCount++) {\\n  console.log(myArray[indexCount]);\\n}\\n\"))), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"Object\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for-in\"), \" loops are used to loop over keys in an object. This can be error prone because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for-in\"), \" does not loop from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"length - 1\"), \" but over all the present keys in the object and its prototype chain.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If possible, organize data so it is not necessary to iterate over objects. If that isn't possible, wrap the content of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for-in\"), \" loop in a conditional statement to prevent it from from iterating over the prototype chain.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"#\", mdx(\"h4\", {\n    style: {\n      \"color\": \"#cd0e3e\"\n    }\n  }, \"Not Recommended\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"myObj = { firstName: \\\"Ada\\\", secondName: \\\"Lovelace\\\" };\\nfor (const key in myObj) {\\n  console.log(myObj[key]);\\n}\\n\")), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"myObj = { firstName: \\\"Ada\\\", lastName: \\\"Lovelace\\\" };\\nfor (const key in myObj) {\\n  if (myObj.hasOwnProperty(key)) {\\n    console.log(myObj[key]);\\n  }\\n}\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Multiline String Literals\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Do not use.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The whitespace at the beginning of each line can't be safely stripped at compile time; whitespace after the slash will result in tricky errors; and while most script engines support this, it is not part of the specification.\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#cd0e3e\"\n    }\n  }, \"Not Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const myString =\\n  \\\"A rather long string of English text, an error message \\\\\\n    actually that just keeps going and going -- an error \\\\\\n    message that is really really long.\\\";\\n\")), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const myString =\\n  \\\"A rather long string of English text, an error message\\\" +\\n  \\\"actually that just keeps going and going -- an error\\\" +\\n  \\\"message that is really really long.\\\";\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Array and Object Literals\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use Array and Object literals instead of Array and Object constructors.\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#cd0e3e\"\n    }\n  }, \"Not Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const myArray = new Array(x1, x2, x3);\\n\\nconst myObject = new Object();\\nmyObject.a = 0;\\n\")), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const myArray = [x1, x2, x3];\\n\\nconst myObject = {\\n  a: 0,\\n};\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"JavaScript Style Rules\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Naming\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In general, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"functionNamesLikeThis\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variableNamesLikeThis\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClassNamesLikeThis\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"methodNamesLikeThis\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CONSTANT_VALUES_LIKE_THIS\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filenameslikethis.js\"), \".\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Code Formatting\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Because of implicit semicolon insertion, always start your curly braces on the same line as whatever they're opening.\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"if (something) {\\n  // Do something\\n} else {\\n  // Do something else\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Single-line array and object initializers are allowed when they fit on one line. There should be no spaces after the opening bracket or before the closing bracket:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\n<h4 style=\\\"color:#438344\\\">Recommended</h4>\\n\\n```javascript\\n\\n    const array = [1, 2, 3];\\n    const object = {a: 1, b: 2, c: 3};\\n\\nMultiline array and object initializers are indented one-level, with the braces on their own line, just like blocks:\\n\\n\")), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const array = [\\n  \\\"Joe <joe@email.com>\\\",\\n  \\\"Sal <sal@email.com>\\\",\\n  \\\"Murr <murr@email.com>\\\",\\n  \\\"Q <q@email.com>\\\",\\n];\\n\\nconst object = {\\n  id: \\\"foo\\\",\\n  class: \\\"foo-important\\\",\\n  name: \\\"notification\\\",\\n};\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Parentheses\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Only where required.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use sparingly and in general only where required by the syntax and semantics.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Strings\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For consistency single-quotes (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'\"), \") are preferred over double-quotes (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\"), \"). This is helpful when creating strings that include HTML:\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const element = '<button class=\\\"btn\\\">Click Me</button>';\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"*\", \"*\", \" Notable exception to this is in JSON objects: double quotes are required per the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.json.org/\"\n  }, \"JSON specification\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Tips and Tricks\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"True and False Boolean Expressions\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The following are all false in boolean expressions:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"null\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"undefined\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"''\"), \" the empty string\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \" the number\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"But be careful, because these are all true:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"'0'\"), \" the string\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[]\"), \" the empty array\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{}\"), \" the empty object\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Conditional Ternary Operator\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The conditional ternary operator is recommended, although not required, for writing concise code. Instead of this:\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#cd0e3e\"\n    }\n  }, \"Not Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"if (val) {\\n  return foo();\\n} else {\\n  return bar();\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can write this:\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"return val ? foo() : bar();\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"&& and ||\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"These binary boolean operators are short-circuited and evaluate to the last evaluated term. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"||\"), \" has been called the default operator because instead of writing this:\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#cd0e3e\"\n    }\n  }, \"Not Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const foo = (name) => {\\n  let theName;\\n  if (name) {\\n    theName = name;\\n  } else {\\n    theName = \\\"John\\\";\\n  }\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can write this:\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const foo = (name) => {\\n  const theName = name || \\\"John\\\";\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&&\"), \" is also used for shortening code. For instance, instead of this:\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#cd0e3e\"\n    }\n  }, \"Not Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"if (node) {\\n  if (node.kids) {\\n    console.log(node.kids);\\n  }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can do this:\"), mdx(\"h4\", {\n    style: {\n      \"color\": \"#438344\"\n    }\n  }, \"Recommended\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"if (node && node.kids) {\\n  console.log(node.kids);\\n}\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#general-formatting-rules","title":"General Formatting Rules","items":[{"url":"#trailing-whitespace","title":"Trailing Whitespace"},{"url":"#indentation","title":"Indentation"}]},{"url":"#general-meta-rules","title":"General Meta Rules","items":[{"url":"#encoding","title":"Encoding"},{"url":"#comments","title":"Comments"},{"url":"#action-items","title":"Action Items"}]},{"url":"#javascript-language-rules","title":"JavaScript Language Rules","items":[{"url":"#variable-declaration","title":"Variable Declaration"},{"url":"#semicolons","title":"Semicolons"},{"url":"#wrapper-objects-for-primitive-types","title":"Wrapper Objects for Primitive Types"},{"url":"#closures","title":"Closures"},{"url":"#for-for-in-and-foreach","title":"for, for-in and forEach","items":[{"url":"#array","title":"Array"},{"url":"#object","title":"Object"}]},{"url":"#multiline-string-literals","title":"Multiline String Literals"},{"url":"#array-and-object-literals","title":"Array and Object Literals"}]},{"url":"#javascript-style-rules","title":"JavaScript Style Rules","items":[{"url":"#naming","title":"Naming"},{"url":"#code-formatting","title":"Code Formatting"},{"url":"#parentheses","title":"Parentheses"},{"url":"#strings","title":"Strings"}]},{"url":"#tips-and-tricks","title":"Tips and Tricks","items":[{"url":"#true-and-false-boolean-expressions","title":"True and False Boolean Expressions"},{"url":"#conditional-ternary-operator","title":"Conditional Ternary Operator"},{"url":"#-and-","title":"&& and ||"}]}]},"timeToRead":3,"parent":{"__typename":"File","relativePath":"udacity/style-guide/javascript.md","fields":null},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"remotes/origin/dependabot/npm_and_yarn/lodash-4.17.21"},"gitCommit":{"hash":"810478fd78a70a186262f7b9fe2ce94cecd753ab","date":"2021-08-30 01:57"}},"pageContext":{"id":"c3478c7d-4fc1-5a27-b13f-53b08cb05dbb"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","4106624947","4106624947"]}