{"componentChunkName":"component---src-templates-docs-js","path":"/components/reactjs","result":{"data":{"site":{"siteMetadata":{"title":"Yonisfy","docsLocation":"https://github.com/mohammedelzanaty/yonisfy","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"10c5b76b-65d5-5cc8-9701-5639695e8de8","title":"ReactJS","slug":"/components/reactjs"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ReactJS\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 4,\n  \"tocDepth\": 3\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Tip = makeShortcode(\"Tip\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"What's is ReactJS?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"As described\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://reactjs.org/docs/getting-started.html\"\n  }, \"React-js\"), \" documentation it's a JavaScript library for building user\\ninterfaces.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/React_(JavaScript_library)\"\n  }, \"Wikipedia\"), \" React is a JavaScript library for building user\\ninterfaces. It is maintained by Facebook and a community of individual developers and companies. React can be used as\\na base in the development of single-page or mobile applications, as it is optimal for fetching rapidly changing data\\nthat needs to be recorded.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"form the above definitions we noticed that React it's javascript library and this make me ask you\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"What's the difference between Library and Framework?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Both libraries and frameworks are reusable code written by someone else. Their purpose is to help you solve common problems in easier ways.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We can use a house as a metaphor to explain the difference between these concepts.\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https\"\n  }, \"Library\"), \" is like building your home from scratch, you have the choice to make your house as you wish, with any architecture you like, you can sort your rooms in the way you like.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https\"\n  }, \"Framework\"), \" is like buying a new house, you don\\u2019t have to deal with building problems, but you can\\u2019t choose how to sort your rooms because the house is already built.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://miro.medium.com/max/640/1*tMJUTqe2dKlueiNU17IZug.png\",\n    \"alt\": \"difference between library and framework\"\n  })), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The technical difference between a framework and library lies in a term called inversion of control. When you use a library, you are in charge of the application flow. You choose when and where to call the library. When you use a framework, the framework is in charge of the flow. It provides you with a few places to plug in your code, but it calls the code you plugged in as needed.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"What's the problems that React solve?\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"UI Complexity \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Solved by\")), \" Declarative Code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Messy Data Flow \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Solved by\")), \" Unidirectional Data Flow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Slow DOM Operations \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Solved by\")), \" virtual-dom-diffing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Repetitive Code \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Solved by\")), \" Reusable components\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"so after we know simple definitions about react and know the problems let's dive into solutions\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://xbsoftware.com/wp-content/uploads/2016/04/why-react-awesome.jpg\",\n    \"alt\": \"https://xbsoftware.com/blog/why-react-awesome-app-dev/\"\n  }))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Composition\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In programming... The composition is about creating small functions and creating bigger and more complete functions with them. Think of a function as a brick, composition is how you would make those bricks work together to build a wall or a house.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Let's think of composition with another way In mathematics, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Function_composition\"\n  }, \"Function Composition\"), \" is an operation that takes two functions \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f\"), \" and g and produces a function h such that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h(x) = g(f(x))\"), \" In this operation, the function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"g\"), \" is applied to the result of applying the function \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"f\"), \" to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"x\"), \". That is, the functions \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f : X \\u2192 Y and g : Y \\u2192 Z\"), \" are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"composed\"), \" to yield a function that maps \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x in X to g(f(x)) in Z\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You might have encoutered composition in mathematics, written like so: f(g(x)). The function f is composed with the function g of x. Or f after g equals f of g of x. After because we evaluate the functions from right to left, from the inside to the outside:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"f <-- g <-- x\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The output of the precedent function becomes the input of the next. x is the input of g. The output of g(x) becomes the f input.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"I see that things might go to be more complicated so now let's take an example,\\nusing \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\n  }, \"map()\"), \" to create a new array from an initial set of data, and then filtering the result\\nusing \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"\n  }, \"filter()\"), \" as a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE:\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"map, filter think of them as a factory or containers that given an initial list (array of things), transform it into something else, while keeping that same original list intact.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const people = ['Mohammed', 'Yasmeen', 'Elzanaty', 'Hamza', 'Saad'];\\npeople.map(name => name[0]).filter(char => char === 'M'); //'M'\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Declarative Code\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"It's an easy and better approach for me, bcoz you let the computer do all that you need for you, you just want to express the logic of a computation without describing its control flow we don't code up all of the steps to get us to the end result. Instead, we declare what we want to be done, and code will take care of doing it.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const people = ['Mohammed', 'Yasmeen', 'Elzanaty', 'Hamza', 'Saad'];\\nconst excitedPeople = people.map(name => name + '!');\\n// [\\\"Mohammed!\\\", \\\"Yasmeen!\\\", \\\"Elzanaty!\\\", \\\"Hamza!\\\", \\\"Saad!\\\"]\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Imperative Code\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"we tell code exactly what to do and how to do it.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const people = ['Mohammed', 'Yasmeen', 'Elzanaty', 'Hamza', 'Saad'];\\nconst excitedPeople = [];\\nfor (let i = 0; i < people.length; i++) {\\n  excitedPeople[i] = people[i] + '!';\\n}\\n// [\\\"Mohammed!\\\", \\\"Yasmeen!\\\", \\\"Elzanaty!\\\", \\\"Hamza!\\\", \\\"Saad!\\\"]\\n\")), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tylermcginnis.com/imperative-vs-declarative-programming/\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Imperative Code\")), \", instructs code for how to perform each step.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/questions/33655534/difference-between-declarative-and-imperative-in-react-js\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Declarative code\")), \", instructs code for what we want to be done, and let code take care of performing the steps.\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Unidirectional Data Flow\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In general, this (concept)\", \"[(https://flaviocopes.com/react-unidirectional-data-flow/)]\", \" means that data has one, and only one, way to be transferred to other parts of the application.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In React this means that:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"state is passed to the view and to child components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"actions are triggered by the view\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"actions can update the state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the state change is passed to the view and to child components\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://flaviocopes.com/react-unidirectional-data-flow/view-actions-state.png\",\n    \"alt\": \"view-actions-state\"\n  })), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The view is a result of the application state. State can only change when actions happen. When actions happen, the state is updated.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Thanks to one-way bindings, data cannot flow in the opposite way (as would happen with two-way bindings, for example), and this has some key advantages:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"it\\u2019s less error prone, as you have more control over your data\\nit\\u2019s easier to debug, as you know what is coming from where\\nit\\u2019s more efficient, as the library already knows what the boundaries are of each part of the system\\nA state is always owned by one Component. Any data that\\u2019s affected by this state can only affect Components below it: its children.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Changing state on a Component will never affect its parent, or its siblings, or any other Component in the application: just its children.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is the reason that the state is often moved up in the Component tree, so that it can be shared between components that need to access it.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Virtual DOM\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"First of all \\u2014 the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/optimizing-performance.html#avoid-reconciliation\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Virtual DOM\")), \" was not invented by React, but React uses it and provides it for free.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Virtual DOM\"), \" is an abstraction of the HTML DOM. It is lightweight and detached from the browser-specific\\nimplementation details. Since the DOM itself was already an abstraction, the virtual DOM is, in fact, an abstraction of\\nan abstraction.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://dev.to/koolkishan/what-is-virtual-dom-how-virtual-dom-works-what-is-reconciliation-what-is-diffing-algorithm-what-makes-react-so-fast-327a\"\n  }, \"Virtual DOM\"), \" reflects a tree in which each node is an HTML element. React is able to traverse and carry out\\noperations on this Virtual DOM, saving our app from having \\\"costly\\\" activity on the actual DOM.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In simple words, virtual DOM is just a copy of the original DOM kept in the memory and synced with the real DOM by libraries such as ReactDOM. This process is called Reconciliation.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Virtual DOM has the same properties that of the Real DOM, but it lacks the power to directly change the content of the screen.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Think of Virtual DOM as the blueprint of a machine, changes made to the blueprint doesn't reflects on the machine itself.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So when there is a update in the virtual DOM, react compares the virtual DOM with a snapshot of the virtual DOM taken right before the update of the virtual DOM.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"With the help of this comparison React figures out which components in the UI needs to be updated. This process is called diffing. The algorithm that is used for the diffing process is called as the diffing algorithm.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Once React knows which components has been updated, then it replaces the original DOM nodes with the updated DOM node.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://i0.wp.com/programmingwithmosh.com/wp-content/uploads/2018/11/lnrn_0201.png?fit=1173%2C785&ssl=1\",\n    \"alt\": \"React Virtual DOM Explained in Simple English - Programming with Mosh\"\n  }))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"The Diffing Algorithm\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/reconciliation.html#the-diffing-algorithm\"\n  }, \"Diffing\"), \" determines how to make efficient changes to the DOM. With diffing, old DOM nodes are taken out and replaced only\\nwhen necessary. This way, our app doesn't perform any unnecessary operations to figure out when to render content.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Pure React\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Let's start by writing pure React. No compile step. No JSX. No Babel. No Webpack or Create-React-App. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Just pure\\nVanilla JavaScript\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Let's start your project. Create your project directory. I'm going to call mine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mz-shop\"), \" since we're going to be\\nbuilding a shop app throughout this course.\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a file and name it \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"index.html\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"put it into a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/\"), \" directory inside your project folder.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \" put:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\" />\\n    <link rel=\\\"stylesheet\\\" href=\\\"./style.css\\\" />\\n    <title>MZ-Shop</title>\\n  </head>\\n\\n  <body>\\n    <div id=\\\"root\\\">not rendered</div>\\n    <script src=\\\"https://unpkg.com/react@17.0.1/umd/react.development.js\\\"></script>\\n    <script src=\\\"https://unpkg.com/react-dom@17.0.1/umd/react-dom.development.js\\\"></script>\\n    <script>\\n      // Your code is going to go here\\n    </script>\\n  </body>\\n</html>\\n\")), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What's new between React 16 and React 17? Nothing! No new features were added. It was a \\\"stepping stone\\\" version that allows sites to upgrade React versions gradually. Previously only one copy of React could run on a page at a time and with v17 more than one can. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/blog/2020/10/20/react-v17.html\"\n  }, \"See more here\"), \".\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now open this file in your browser. On Mac, hit \\u2318 (command) + O in your favorite browser, and on Windows and Linux hit\\nCTRL + O to open the Open prompt. Navigate to wherever you saved the file and open it. You should see a line of text\\nsaying \\\"not rendered\\\".\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Pretty standard HTML5 document. If this is confusing, here's a free course from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Udacity\"), \"\\nabout \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.udacity.com/course/intro-to-html-and-css--ud001\"\n  }, \"HTML and CSS\"), \" that can help you out.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We're adding a root div. We'll render our React app here in a sec. It doesn't \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"have\"), \" to be called root, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"just a common\\npractice.\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We have two script tags.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The first is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"React library.\"), \" This library is the interface of how to interact with React; all the methods (except\\none) will be via this library. It contains no way of rendering itself though; it's just the API.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The second library is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"the rendering layer\"), \". Since we're rendering to the browser, we're using React DOM. There are\\nother React libraries like React Native, React 360 (formerly React VR), A-Frame React, React Blessed, and others. You\\nneed both script tags. The order is not important.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The last script tag is where we're going to put our code. You don't typically do this but I wanted to start as simple\\nas possible. This script tag must come \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"after\"), \" the other two.\"))), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Let's add some style! \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mohammedelzanaty/react-redux-guide-with-zanaty/blob/main/mz-shop/src/assets/styles/App.css\"\n  }, \"Click here\"), \" to get the stylesheet for this course. If you follow along with the course and use the same class names, the styles will be applied for you automatically. This isn't a course on CSS so I make no assertion it's any good!\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"In the last script tag, put the following.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const App = () => {\\n  return React.createElement('div', {}, React.createElement('h1', {}, 'MZ Shop'));\\n};\\n\\nReactDOM.render(React.createElement(App), document.getElementById('root'));\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is about the simplest React app you can build.\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The first thing we do is make our own component, App. React is all about making components. And then taking those\\ncomponents and making more components out of those.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"There are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"two types of components\"), \", function components and class components. This is a function component. We'll see\\nclass components shortly.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A function component \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"must\"), \" return markup (which is what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \" generates.)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"These component render functions \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"have\"), \" to be fast. This function is going to be called a lot. It's a hot code path.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Inside of the render function, you cannot modify any sort of state. Put in functional terms, this function must be\\npure. You don't know how or when the function will be called so it can't modify any ambient state.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \" creates one \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"instance\"), \" of some component. If you pass it a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"string\"), \", it will create a DOM tag\\nwith that as the string. We used \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h1\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \", those tags are output to the DOM. If we put \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-some-custom-element\"), \",\\nit'll output that (so web components are possible too.)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The second empty object (you can put \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" too) is attributes we're passing to the tag or component. Whatever we put\\nin this will be output to the element (like id or style.)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReactDOM.render\"), \" is what takes our rendered \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" component and puts in the DOM (in our case we're putting it in\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"root\"), \" element.)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Notice we're using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" as a parameter to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReactDOM.render\"), \". We need an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"instance\"), \"\\nof \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" to render out. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" is a class of components and we need to render one instance of a class. That's\\nwhat \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \" does: it makes an instance of a class.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Without React Decoration\\nNow that we've done that, let's separate this out from a script tag on the DOM to its own script file (best practice.)\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make a new file in your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src\"), \" directory called \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"App.js\"), \" and cut and paste your code into it.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<script src=\\\"App.js\\\"></script>\"), \" before end of the body at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"index.html\"), \" to link js file\")))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Modify your code, so it looks like:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const Product = () => {\\n  return React.createElement('div', {}, [\\n    React.createElement('h1', {}, 'Mens Cotton Jacket'),\\n    React.createElement(\\n      'h2',\\n      {},\\n      'Great outerwear jackets for Spring/Autumn/Winter, suitable for many occasions,'\\n    ),\\n    React.createElement('h2', {}, '55.99$'),\\n  ]);\\n};\\n\\nconst App = () => {\\n  return React.createElement('div', {}, [\\n    React.createElement('h1', {}, 'MZ Shop'),\\n    React.createElement(Product),\\n    React.createElement(Product),\\n    React.createElement(Product),\\n  ]);\\n};\\n\\nReactDOM.render(React.createElement(App), document.getElementById('root'));\\n\")), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uD83D\\uDEA8 You will be seeing a console warning \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Warning: Each child in a list should have a unique \\\"key\\\" prop.\"), \" in your browser console. React's dev warnings are trying to help your code run faster. Basically React tries to keep track of components are swapped in order in a list and it does that by you giving it a unique key it can track. If it sees two things have swapped, it'll just move the components instead of re-rendering.\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To make an element have multiple children, just pass it an array of elements.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We created a second new component, the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Product\"), \" component. This component represents one product. When you have\\ndistinct ideas represented as markup, that's a good idea to separate that it into a component like we did here.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Since we have a new \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Product\"), \" component, we can use it multiple times! We just use multiple calls\\nto \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"React.createElement\"), \"\\n.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"createElement\"), \", the last two parameters are optional. Since Product has no props or children (it could, we just\\ndidn't make it use them yet) we can just leave them off.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Okay, so we can have multiple product, but it's not a useful component yet as the product contain a lot of properties\\nlike title, price, description and image etc. Let's make it a bit more complicated.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const Product = props => {\\n  return React.createElement('div', {}, [\\n    React.createElement('h1', {}, props.title),\\n    React.createElement('h2', {}, props.description),\\n    React.createElement('h2', {}, props.price),\\n  ]);\\n};\\n\\nconst App = () => {\\n  return React.createElement('div', {}, [\\n    React.createElement('h1', {}, 'MZ Shop'),\\n    React.createElement(Product, {\\n      title: 'Samsung SE450',\\n      description:\\n        '21.5-inch desktop business monitor offers superior ergonomics and eco-friendly features \\u2013 constructed with 30%',\\n      price: '89.99$',\\n    }),\\n    React.createElement(Product, {\\n      title: 'Mac Book Pro',\\n      description:\\n        'our perfect pack for everyday use and walks in the forest. 15 inches) in the padded sleeve, your everyday',\\n      price: '700$',\\n    }),\\n  ]);\\n};\\n\\nReactDOM.render(React.createElement(App), document.getElementById('root'));\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now we have a more flexible component that accepts props from its parent. Props are variables that a parent (App) passes\\nto its children (the instances of Product.) Now each one can be different! Now that is far more useful than it was since\\nthis Product component can represent not just Mens Cotton Jacket, but any Product. This is the power of React! We can make multiple, re-usable\\ncomponents. We can then use these components to build larger components, which in turn make up yet-larger components.\\nThis is how React apps are made!\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Scaffolding Your React App\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"JSX is awesome, but it does need to be transpiled into regular JavaScript before reaching the browser. We typically use\\na transpire like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/babel/babel\"\n  }, \"Babel\"), \" to accomplish this for us. We can run Babel through a build\\ntool, like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/webpack/webpack\"\n  }, \"Webpack\"), \" which helps bundle all of our assets (JavaScript files, CSS,\\nimages, etc.) for web projects.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To streamline these initial configurations, we will use Facebook's Create React App package to manage all the setup for\\nus! This tool is incredibly helpful to get started in building a React app, as it sets up everything we need with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"zero\\nconfiguration\"), \"! Install Create React App (through the command-line with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/get-npm\"\n  }, \"npm\"), \"), and then\\nwe can walk through what makes it so great.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"npm install -g create-react-app\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you're seeing errors when trying to install a package globally, feel free to check\\nout \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.npmjs.com/getting-started/fixing-npm-permissions\"\n  }, \"this article\"), \" in the npm documentation. Note that to\\nfind out where global packages are installed, you can run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm list -g\"), \" in your console (more\\ninformation \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/questions/5926672/where-does-npm-install-packages\"\n  }, \"here\"), \").\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Let's also Set up the API file we will use in the project we will build to make more focus on react\"), \" I will use a fake api that return products to give us the ability to play with it. you can \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://fakestoreapi.com/docs\"\n  }, \"take a look\"), \" at it for more information\\nso now we need 4 important function to use\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Get Products\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Get Product by ID\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Delete Product\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Search in Products by Query\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"so now create a folder in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" folder and name it \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api\"), \" then create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProductAPI.js\"), \" ad past this code on it.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const BASE_URL = 'https://fakestoreapi.com';\\n\\n/**\\n * Get Product by Id\\n * @param productId\\n * @returns {Promise<any>}\\n */\\nexport const getProductById = productId =>\\n  fetch(`${BASE_URL}/products/${productId}`)\\n    .then(res => res.json())\\n    .then(data => data)\\n    .catch(error => {\\n      console.log(error);\\n    });\\n\\n/**\\n * Delete Product\\n * @param productId\\n * @returns {Promise<any>}\\n */\\nexport const deleteProduct = productId =>\\n  fetch(`${BASE_URL}/products/${productId}`, {\\n    method: 'DELETE',\\n  })\\n    .then(res => res.json())\\n    .then(data => data)\\n    .catch(error => {\\n      console.log(error);\\n    });\\n/**\\n * Get All Products\\n * @returns {Promise<any>}\\n */\\nexport const getAllProduct = () =>\\n  fetch(`${BASE_URL}/products`)\\n    .then(res => res.json())\\n    .then(data => data)\\n    .catch(error => {\\n      console.log(error);\\n    });\\n\\n/**\\n * Search in products list\\n * @param query\\n * @returns {Promise<*>}\\n */\\nexport const searchProduct = async query => {\\n  const products = await getAllProduct();\\n  return products.filter(\\n    product => product.title.toLowerCase().indexOf(query.toLowerCase()) !== -1\\n  );\\n};\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"JSX\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So far we've been writing React without JSX, something that I don't know anyone that actually does with their apps. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\nEveryone\"), \" uses JSX. I show you this way so what JSX is actually doing is demystified to you. It doesn't do hardly\\nanything. It just makes your code a bit more readable.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If I write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement(\\\"h1\\\", { id: \\\"main-title\\\" }, \\\"My Website\\\");\"), \", what am I actually trying to have rendered\\nout? \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<h1 id=\\\"main-title\\\">My Website</h1>\"), \", right? What JSX tries to do is to shortcut this translation layer in your\\nbrain, so you can just write what you mean. Let's convert \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Product.js\"), \" to using JSX. It will look like this:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import React from 'react';\\n\\nconst Product = props => {\\n  return (\\n    <div>\\n      <h1>{props.title}</h1>\\n      <h2>{props.description}</h2>\\n      <h2>{props.price}</h2>\\n    </div>\\n  );\\n};\\n\\nexport default Product;\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"I don't know about you, but I find this far more readable. And if it feels uncomfortable to you to introduce HTML into\\nyour JavaScript, I invite you to give it a shot until the end of the workshop. By then it should feel a bit more\\ncomfortable. And you can always go back to the old way.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"However, now you know \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"what\"), \" JSX is doing for you. It's just translating those HTML tags into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \"\\ncalls. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"That's it.\"), \" Really. No more magic here. JSX does nothing else. Many people who learn React don't learn this.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Notice the strange \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{props.title}\"), \" syntax: this is how you output JavaScript expressions in JSX. An expression is\\nanything that can be the right side of an assignment operator in JavaScript,\\ne.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const x = <anything that can go here>\"), \". If you take away the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{}\"), \" it will literally output \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.title\"), \" to the\\nDOM.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Notice you still have to import React despite React not being explicitly used. Remember that JSX is compiled\\nto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \" calls. Anywhere you use JSX, you need to import React.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So now JSX is demystified a bit, let's go convert App.js.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import React, { Component } from 'react';\\nimport Product from './Product';\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div>\\n        <h1>MZ Shop!</h1>\\n        <Product\\n          title='Samsung SE450'\\n          description='desktop business monitor offers superior ergonomics'\\n          price='89.99$'\\n        />\\n        <Product\\n          title='Mac Book Pro'\\n          description='Stash your laptop (up to 15 inches) in the padded sleeve,'\\n          price='700$'\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Notice we have Product as a component. Notice that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"P\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Product\"), \" is capitalized. It \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"must\"), \" be. If you make it lowercase,\\nit will try to have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"product\"), \" as a web component and not a React component.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We now pass props down as we add attributes to an HTML tag. Pretty cool.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDC8E \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mohammedelzanaty/react-redux-guide-with-zanaty/tree/3a5a7260aebd28234cac5f63fa27ab3ef5a9f3ca\"\n  }, \"3a5a7260aebd28234cac5f63fa27ab3ef5a9f3ca\"), \".\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Component Composition\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"I remember the first project I made in react and the way of thinking through building the component, just need to create\\ntoo many components, but I found at the end of the day that this lead to deeply nested structures which made it a pain\\nto pass props all the way down. so now react provide a solution for this\\nby \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/composition-vs-inheritance.html\"\n  }, \"Composition\"), \" and this lead us to\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"What's Composition\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In React, composition is a natural pattern of the component model. It's how we build components from other components,\\nof varying complexity and specialization through props. Depending on how generalized these components are, they can be\\nused in building many other components.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reducing Component Nesting With Composition\"), \" for example here in our application the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Product\"), \" component. each product will have various information about the product including title, price, image and description etc...\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Product Info Component\\nconst ProductInfo = ({ id, title, description, price, category }) => {\\n  return (\\n    <div className='product-details'>\\n        <h3 className='product-title'>{title}</h3>\\n      <ProductPriceCategory price={price} category={category} />\\n      <p className='product-description'>{description}</p>\\n    </div>\\n  );\\n};\\n\\n// ProductCategory And PriceComponent\\nconst ProductPriceCategory = ({ price, category }) => {\\n  return (\\n    <div className='product-meta'>\\n      <h4 className='product__price'>{price}</h4>\\n      <p className='product__category'>{category}</p>\\n    </div>\\n  );\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"so we can do this better here to reduce the nested structure by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.children\"), \" and by handling specialization\\nthrough props.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Product.js\\nimport React from 'react';\\n\\n// Product Card Component\\nconst Product = props => {\\n  return (\\n    <div className='product'>\\n      {props.product.image && (\\n        <img\\n          src={props.product.image}\\n          className='product-avatar'\\n          alt={`product of ${props.product.title}`}\\n        />\\n      )}\\n      {props.children}\\n      <div\\n        className='product-remove'\\n        onClick={() => {\\n          props.onDeleteProduct(props.product.id);\\n        }}\\n      >\\n        remove\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Product;\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"so now before we continue I have a question\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"What's Props Children\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The React docs say that you can use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codeburst.io/a-quick-intro-to-reacts-props-children-cb3d2fce4891\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"props.children\")), \" on components that represent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"generic boxes\"), \"\\nand that \\u2018don\\u2019t know their children ahead of time\\u2019. For me, that did not really clear things up. I\\u2019m sure for some, that\\ndefinition makes perfect sense, but it did not for me. My simple explanation of what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.props.children\"), \" does is that\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"it is used to display whatever you include between the opening and closing tags when invoking a component.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A simple example Here\\u2019s an example of a stateless function that is used to create a component. Again, since this is a\\nstateless function, there is no 'this' keyword so just use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.children\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const Product = props => {\\n  return (\\n    <div>\\n      <h1>Zanaty</h1>\\n      {props.children}\\n    </div>\\n  );\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This component contains an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<h1>\"), \" that is receiving some props, and then it is displaying {props.children}. Whenever\\nthis component is invoked\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{props.children}\"), \" will also be displayed and this is just a reference to what is between the\\nopening and closing tags of the component.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"so let's back to our code and create a product card in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Product.js\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import React from 'react';\\n\\nconst Product = ({ title, image, description, price, category }) => {\\n  return (\\n    <div className='product'>\\n      {image && <img src={image} className='product-avatar' alt={`product of ${title}`} />}\\n      <div className='product-details'>\\n        <h3 className='product-title'>{title}</h3>\\n        <div className='product-meta'>\\n          <p className='product-price'>{price}</p>\\n          <p className='product-category'>{category}</p>\\n        </div>\\n        <p className='product-description'>{description}</p>\\n      </div>\\n      <div className='product-remove'>remove</div>\\n    </div>\\n  );\\n};\\n\\nexport default Product;\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"but now as we add more props to our code we need to edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Product\"), \" component at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" like\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import React, { Component } from 'react';\\nimport Product from './Product';\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div>\\n        <div className='product-list'>\\n          <Product\\n            title='Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops'\\n            description='Your perfect pack for everyday use and walks in the forest. '\\n            price='89.99$'\\n            category='men clothing'\\n            image='https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg'\\n          />\\n\\n          <Product\\n            title='Mens Casual Premium Slim Fit T-Shirts'\\n            description='Slim-fitting style, contrast raglan long sleeve, three-button henley placket,'\\n            price='89.99$'\\n            category='men clothing'\\n            image='https://fakestoreapi.com/img/71-3HjGNDUL._AC_SY879._SX._UX._SY._UY_.jpg'\\n          />\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"What are some benefits of this change? We now have code (the Card component) that is more reusable as a result of it\\nbeing generalized. We create the specialized cards \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProductCard\"), \" by passing props through Card. We made our overall code\\ncleaner by unifying individual components that are not reusable, resulting in a simpler structure that doesn't require\\npassing props down through many components.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In general I find two reasons to break a component into smaller components: reusability and organization. When you want\\nto use the same component in multiple places (e.g. a button, a tool tip, etc.) then it's helpful to have one component\\nto maintain, test, use, etc.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Other times it can be useful to break concepts down into smaller concepts to make a component read better. For example,\\nif we put all the logic for this entire page into one component, it would become pretty hard to read and manage. By\\nbreaking it down we can make each component easier to understand when you read it and thus maintain.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Looks much better! The links don't go anywhere yet but we'll get there. We don't have a good loading experience yet\\nthough. Right now we just seem unresponsive. Using a new tool to React called Suspense we can make the DOM rendering\\nwait until we finish loading our data, show a loader, and then once it finishes we can resume rendering it. This is\\ncoming soon; for now you would just keep track of a loading Boolean and then conditionally show your component or a\\nloading spinner based on whether it was finished loading or not.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"It's important to note that this is just a demonstration of a concept and by no means the 'right' way. Depending on your\\nneeds, you may compose your components differently.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I hear you enough working with static data and let's make stuff more dynamically from the backend\\n\\uD83D\\uDCDD NOTE in the commited code you will find CSS I add to make thing looks nicer\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDC8E \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mohammedelzanaty/react-redux-guide-with-zanaty/tree/6e1a7c36dec7eb028b8c46efe790c93f6f7ae9d9\"\n  }, \"6e1a7c36dec7eb028b8c46efe790c93f6f7ae9d9\"), \".\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"State and Lifecycle Methods with React\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Before dig deeper and dive for getting data from the api let's clear some important concepts and make sure we understand\\nit well one of these important concepts is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state\"), \" so what's the state\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"State\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"As \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/faq-state.html\"\n  }, \"ReactDoc\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"plain JavaScript object\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"managed within the component (similar to variables declared within a function).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can only be used in Class Components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be updated only by a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setState\"), \" function which schedules an update to a component\\u2019s state object. When state changes, the component responds by re-rendering.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"so it define the state in the class component it defined as property of the\\ncomponent class for example:-\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"class App extends Component {\\n  // ...\\n  state = {};\\n  // ...\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"and can be updated with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setState\"), \" by passing an object or a function in setState?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Passing an update function allows you to access the current state value inside the updater. Since setState calls are batched, this lets you chain updates and ensure they build on top of each other instead of conflicting:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// this give you access to the previous state\\nthis.setState((prevState) => ({ ... }))\\nOR\\nthis.setState({ ... })\\n\")), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uD83D\\uDCDD props get passed to the component (similar to function parameters) and it's immutable i.e. once set the props cannot be changed,\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Should this Component have state?\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"state is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"optional\"), \". Since state \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"increases complexity and reduces predictability\"), \", a Component without state is preferable. Even though you clearly can't do without state in an interactive app, you should avoid having too many Stateful Components.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md#component-types\"\n  }, \"Component types\")), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Stateless Component\"), \" \\u2014 Only props, no state. There's not much going on besides the render() function and all their logic revolves around the props they receive. This makes them very easy to follow (and test for that matter). We sometimes call these dumb-as-f*ck Components (which turns out to be the only way to misuse the F-word in the English language).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Stateful Component\"), \" \\u2014 Both props and state. We also call these state managers. They are in charge of client-server communication (XHR, web sockets, etc.), processing data and responding to user events. These sort of logistics should be encapsulated in a moderate number of Stateful Components, while all visualization and formatting logic should move downstream into as many Stateless Components as possible.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"so for now we need to statue our products in the app and initialize it with empty array for now\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"class App extends Component {\\n  state = {\\n    products: [],\\n  };\\n\\n  render() {\\n    // ...\\n  }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"the next step will be get the data from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"API\"), \" and this will lead us to other important concept\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"The Component Lifecycle\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"As \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/react-component.html\"\n  }, \"ReactDoc\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each component has several \\u201Clifecycle methods\\u201D that you can override to run code at particular times in the process.\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can use \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\"\n  }, \"this lifecycle diagram\"), \" as a cheat sheet. In\\nthe list below, commonly used lifecycle methods are marked as bold. The rest of them exist for relatively rare use cases.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The diagram below is from the official React documentation showcasing the different React lifecycle methods and when they are invoked.\"), mdx(\"iframe\", {\n    width: \"100%\",\n    height: \"600\",\n    src: \"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\",\n    title: \"React Life Cycle\",\n    frameBorder: \"0\"\n  }), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"so there're three phases:\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Mounting\"), \": \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Adding\"), \" nodes to the DOM\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Updating\"), \": \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Altering\"), \" existing nodes in the DOM\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Un Mounting\"), \": \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Removing\"), \" nodes from the DOM\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"every component goes through and to put it in simple terms, you can think of the React component lifecycle as the \\u201Clifetime\\u201D of a component. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Lifecycle methods are series of events that happen throughout the birth, growth, and death of a React component.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"let's think a little here what we need to achieve in simple words \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get products and parse it to the DOM\"), \" so logically we\\nare in the mounting phase there's a lot of stuff happen here but for now let focus on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidMount\"), \" which invoked\\nimmediately after a component is mounted (inserted into the tree). Initialization that requires DOM nodes should go\\nhere. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/react-component.html#componentdidmount\"\n  }, \"see more\")), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"to apply this at our code\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import React, { Component } from 'react';\\nimport { getAllProduct } from './api/ProductAPI';\\n\\nclass App extends Component {\\n  state = {\\n    products: [],\\n  };\\n\\n  componentDidMount() {\\n    // get products\\n    getAllProduct().then(products => {\\n      if (Array.isArray(products)) {\\n        this.setState({ products });\\n      }\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <div className='product-list'>\\n          <pre>\\n            <code>{JSON.stringify(this.state, null, 2)}</code>\\n          </pre>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Whenever a class gets created (React or not), the constructor gets called. If you don't create a constructor, there's a default one that silently gets run in the background. Inside we accept the props from whatever parent created it and then call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"super(props)\"), \" since we need to take those props and hand them to React.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We initiate state here. We are going to be keeping an array of products data that we load from the API. We'll\\ninitialize that as an empty array so we never have to check if that array exists or not.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We're calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAllProduct\"), \" method. This lets us get all available products.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now, after the response comes back from the API, we call a method called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setState\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setState\"), \" takes in an object and\\ndoes a shallow merge with your current state.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now we take that API data and output that to the DOM. Notice React is smart enough to re-render itself after a\\nsetState is called. pre and code are two tags that allow you to output that code pre-formatted.\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Let's make the app use the Product Component we made\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import React, { Component } from 'react';\\nimport { getAllProduct } from './api/ProductAPI';\\nimport Product from './Product';\\n\\nclass App extends Component {\\n  state = {\\n    products: [],\\n  };\\n\\n  componentDidMount() {\\n    // get products\\n    getAllProduct().then(products => {\\n      if (Array.isArray(products)) {\\n        this.setState({ products });\\n      }\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <div className='product-list'>\\n          {this.state.products &&\\n            this.state.products.map(product => (\\n              <Product\\n                title={product.title}\\n                image={product.image}\\n                price={product.price}\\n                category={product.category}\\n                description={product.description}\\n              />\\n            ))}\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCDD We use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \" which takes a JavaScript array, takes a function, applies that function to each array item (i.e. if you have an array of length 15, that function gets called 15 times,) and returns a new array containing the results of each of those function called. In\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\nconst x = [1,2,3].map(num => num * 2); // [2,4,6]\\n\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this case, we have an array of numbers, and we transform those into other thing.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"if you open your console now you will find \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Warning: Each child in a list should have a unique \\\"key\\\" prop.\")), \" because Key is a unique identifier that we give React, so it can do quick comparisons on objects. If we decide to change how we sort the list of products.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Ex.\"), \" we sort by title instead of price, we'd re-arrange all the object but they'd be the same object. All React knows is it got a new list. Without any further hinting, React would just destroy all the DOM objects and start over. If we give it a unique key for each object, it can track that an object just moved positions and didn't actually get destroyed and just move the DOM object instead of re-rendering. Big performance win.\\nso to achieve this and remove warning so the map will\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"this.state.products.map(product => (\\n  <Product\\n    key={product.id} /* this line added */\\n    title={product.title}\\n    image={product.image}\\n    price={product.price}\\n    category={product.category}\\n    description={product.description}\\n  />\\n));\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDC8E \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mohammedelzanaty/react-redux-guide-with-zanaty/commit/39c564868e4c0e2fc1dc5c609b7481e94c72a9ea\"\n  }, \"39c564868e4c0e2fc1dc5c609b7481e94c72a9ea\"), \".\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Handling User Input\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"HTML form elements work a little bit differently from other DOM elements in React, because form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<form>\\n  <label>\\n    Name:\\n    <input type=\\\"text\\\" name=\\\"name\\\" />\\n  </label>\\n  <input type=\\\"submit\\\" value=\\\"Submit\\\" />\\n</form>\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This form has the default HTML form behavior of browsing to a new page when the user submits the form. If you want this behavior in React, it just works. But in most cases, it\\u2019s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form. The standard way to achieve this is with a technique called \\u201Ccontrolled components\\u201D. \\u27A1 Read More @ \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/forms.html\"\n  }, \"ReactDoc\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Controlled Components\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/forms.html#controlled-components\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Controlled Component\")), \" is one that takes its current value through props and notifies changes through callbacks like onChange. A parent component \\\"controls\\\" it by handling the callback and managing its own state and passing the new values as props to the controlled component. You could also call this a \\\"dumb component\\\".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"For example,\"), \" , we can write the form that give user ability to search in the products as a controlled component:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import React, { Component } from 'react'\\n\\nclass App extends Component {\\n  // 1 -> declare the state \\n  // With a controlled component, the input\\u2019s value is always driven by the React state. \\n  // While this means you have to type a bit more code, \\n  // you can now pass the value to other UI elements too, or reset it from other event handlers.\\n  state = {\\n    query: ''\\n  }\\n\\n  handleSearchProduct = query => {\\n    this.setState(() => ({\\n      query: query.trim()\\n    }))\\n  }\\n\\n  render() {\\n    const { query } = this.state\\n    return (\\n      <div className=\\\"list-products\\\">\\n        <div className=\\\"list-products-top\\\">\\n          <input\\n            className=\\\"search-products\\\"\\n            type=\\\"text\\\"\\n            placeholder=\\\"Search Products\\\"\\n            // Since the value attribute is set on our form element, the displayed value will always be this.state.query,\\n            value={query}\\n            // on change event that take care of any changes happen in the input\\n            // making the React state the source of truth. \\n            // Since handleChange runs on every keystroke to update the React state, \\n            // the displayed value will update as the user types.\\n            onChange={event => {\\n              this.handleSearchProduct(event.target.value)\\n            }}\\n          />\\n        </div>\\n\\n        // ...\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default App\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Uncontrolled Component\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/uncontrolled-components.html\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Uncontrolled Component\")), \" is one that stores its own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To write an uncontrolled component, instead of writing an event handler for every state update, you can use a ref to get form values from the DOM.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"For example,\"), \" this code accepts a single name in an uncontrolled component:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import React, { Component, createRef } from 'react'\\n\\nclass App extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.input = createRef();\\n  }\\n\\n  handleSearchProduct = event => {\\n    alert('A name was submitted: ' + this.input.current.value);\\n    event.preventDefault();\\n  }\\n\\n  render() {\\n    const { query } = this.state\\n    return (\\n      <div className=\\\"list-products\\\">\\n        <div className=\\\"list-products-top\\\">\\n          <input\\n            className=\\\"search-products\\\"\\n            type=\\\"text\\\"\\n            placeholder=\\\"Search Products\\\"\\n            ref={this.input}\\n          />\\n        </div>\\n\\n        // ...\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default App\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/#conclusion\"\n  }, \"Conclusion\"), \" \"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Both the controlled and uncontrolled form fields have their merit. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Evaluate your specific situation and pick the approach\"), \" \\u2014 what works for you is good enough.\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Feature\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"uncontrolled\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"controlled\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"one-time value retrieval (e.g. on submit)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u2705\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u2705\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"validating on submit\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u2705\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u2705\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"instant field validation\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u274C\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u2705\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"conditionally disabling submit button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u274C\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u2705\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"enforcing input format\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u274C\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u2705\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"several inputs for one piece of data\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u274C\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u2705\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"dynamic inputs\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u274C\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"\\u2705\")))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If your form is incredibly simple in terms of UI feedback, uncontrolled with refs is entirely fine. You don\\u2019t have to listen to what the various articles are saying is \\u201Cbad.\\u201D\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Also, this is not an once-and-for-all decision: you can always migrate to controlled inputs. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://goshakkk.name/turn-uncontrolled-into-controlled/\"\n  }, \"Going from uncontrolled to controlled inputs is not hard.\"))), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I am not going into all the ways of handling user interactions in JavaScript. You can register handlers for things mouse leave, mouse enter, key up, key down, and can even handle stuff like copy and paste events, focus, blur, etc. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/events.html#supported-events\"\n  }, \"Here's a list of them from the React docs\"), \".\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDC8E \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mohammedelzanaty/react-redux-guide-with-zanaty/commit/02045ab8b4c6fa78f3dd105a375b5f4934bde8c8\"\n  }, \"02045ab8b4c6fa78f3dd105a375b5f4934bde8c8\"), \".\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Props Types\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"I spent a lot of time to ask myself why I use this? and to not hide a secret from you, it was a heavy burden on my shoulders but in simple words this little package will save you from a lot shitty stuff with just multiple lines of code and the most important thing is that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"it will save you from yourself\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"prop-types\"), \" is a runtime checking for react props and similar objects.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"How React props work\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"React props allow you to send data \\u2014 including numbers, strings, functions, objects, arrays, etc. \\u2014 to a component when you call on that component. If you have multiple components, you can pass data from one component to another.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To pass props between components, you would add them when the component is called, just as you would pass arguments when calling on a regular JavaScript function. for more information, check out \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/components-and-props.html\"\n  }, \"react props docs\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Why validate props in React?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When developing a React application, you might encounter the need for a prop to be structured and defined to avoid bugs and errors. Just like a function might have mandatory arguments, a React component might require a prop to be defined, otherwise, it will not render properly. If you forget to pass a required prop into a component that needs it, it could cause your app to behave unexpectedly.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"prop-types\"), \" library in React\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Prior to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React 15.5.0\"), \", a utility named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PropTypes\"), \" was available as part of the React package, which provided a lot of validators for configuring type definitions for component props. It could be accessed with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.PropTypes\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"However, in later versions of React, this utility has been moved to a separate package named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prop-types\"), \", so you need to add it as a dependency for your project in order to get access to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PropTypes\"), \" utility.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"npm install prop-types --save\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"It can be imported into your project files as follows:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"import PropTypes from 'prop-types';\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"then you will be able to use by different \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/prop-types#usage\"\n  }, \"validators provided\"), \" and now I think it's an appropriate time to check how we can add prop-types to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Product.js\"), \" component\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDC8E \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mohammedelzanaty/react-redux-guide-with-zanaty/commit/ea00c52a8ddd3440c75581d34637da3d5e051879\"\n  }, \"ea00c52a8ddd3440c75581d34637da3d5e051879\"), \".\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Presentational and Container Component\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://scotch.io/courses/5-essential-react-concepts-to-know-before-learning-redux/presentational-and-container-component-pattern-in-react\"\n  }, \"Presentational and Container Component Pattern\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://flaviocopes.com/react-presentational-vs-container-components/\"\n  }, \"The difference between Presentational and Container Components\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\"\n  }, \"Presentational and Container Components By \", mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Dan Abramov\")))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDC8E \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mohammedelzanaty/react-redux-guide-with-zanaty/commit/b678eae9198cddb3a7b7119265bf02e57e496962\"\n  }, \"b678eae9198cddb3a7b7119265bf02e57e496962\"), \".\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"React Dev Tools\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"React has some really great tools to enhance your developer experience. We'll go over a few of them here.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"NODE_ENV=development\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"React already has a lot of developer conveniences built into it out of the box. What's better is that they automatically strip it out when you compile your code for production.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So how do you get the debugging conveniences then? Well, if you're using Parcel.js, it will compile your development server with an environment variable of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NODE_ENV=development\"), \" and then when you run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parcel build <entry point>\"), \" it will automatically change that to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NODE_ENV=production\"), \" which is how all the extra weight gets stripped out.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Why is it important that we strip the debug stuff out? The dev bundle of React is quite a bit bigger and quite a bit slower than the production build. Make sure you're compiling with the correct environmental variables or your users will suffer.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Strict Mode\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"React has a new strict mode. If you wrap your app in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<React.StrictMode></React.StrictMode>\"), \" it will give you additional warnings about things you shouldn't be doing. I'm not teaching you anything that would trip warnings from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.StrictMode\"), \" but it's good to keep your team in line and not using legacy features or things that will be soon be deprecated.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Go to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" and wrap \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<App />\"), \" in the render call in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<StrictMode>\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// import at top\\nimport { StrictMode } from 'react';\\n\\n// replace render\\nrender(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>,\\n  document.getElementById('root')\\n);\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Dev Tools\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"React has wonderful dev tools that the core team maintains. They're available for both Chromium-based browsers and Firefox. They let you do several things like explore your React app like a DOM tree, modify state and props on the fly to test things out, tease out performance problems, and programtically manipulate components. Definitely worth downloading now.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Acknowledgment\"), mdx(Tip, {\n    mdxType: \"Tip\"\n  }, \"I am not writing all the content here, most of the explanations based on the workshop  \", \" \", mdx(\"a\", {\n    href: \"https://www.linkedin.com/in/btholt/\",\n    target: \"_blank\"\n  }, \" Brian Holt\"), \" \\xA9\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#whats-is-reactjs","title":"What's is ReactJS?"},{"url":"#whats-the-difference-between-library-and-framework","title":"What's the difference between Library and Framework?"},{"url":"#whats-the-problems-that-react-solve","title":"What's the problems that React solve?","items":[{"url":"#composition","title":"Composition"},{"url":"#declarative-code","title":"Declarative Code"},{"url":"#imperative-code","title":"Imperative Code"},{"url":"#unidirectional-data-flow","title":"Unidirectional Data Flow"},{"url":"#virtual-dom","title":"Virtual DOM"},{"url":"#the-diffing-algorithm","title":"The Diffing Algorithm"}]},{"url":"#pure-react","title":"Pure React"},{"url":"#scaffolding-your-react-app","title":"Scaffolding Your React App"},{"url":"#jsx","title":"JSX"},{"url":"#component-composition","title":"Component Composition","items":[{"url":"#whats-composition","title":"What's Composition"},{"url":"#whats-props-children","title":"What's Props Children"}]},{"url":"#state-and-lifecycle-methods-with-react","title":"State and Lifecycle Methods with React","items":[{"url":"#state","title":"State"},{"url":"#the-component-lifecycle","title":"The Component Lifecycle"}]},{"url":"#handling-user-input","title":"Handling User Input","items":[{"url":"#controlled-components","title":"Controlled Components"},{"url":"#uncontrolled-component","title":"Uncontrolled Component"}]},{"url":"#props-types","title":"Props Types","items":[{"url":"#how-react-props-work","title":"How React props work"},{"url":"#why-validate-props-in-react","title":"Why validate props in React?"},{"url":"#using-the-prop-types-library-in-react","title":"Using the prop-types library in React"}]},{"url":"#presentational-and-container-component","title":"Presentational and Container Component"},{"url":"#react-dev-tools","title":"React Dev Tools","items":[{"url":"#node_envdevelopment","title":"NODE_ENV=development"},{"url":"#strict-mode","title":"Strict Mode"},{"url":"#dev-tools","title":"Dev Tools"}]},{"url":"#acknowledgment","title":"Acknowledgment"}]},"timeToRead":21,"parent":{"__typename":"File","relativePath":"components/reactjs.mdx","fields":{"gitLogLatestAuthorName":"mohammedelzanaty","gitLogLatestAuthorEmail":"mohammedelzanaty129@gmail.com","gitLogLatestDate":"3 months ago"}},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"remotes/origin/dependabot/npm_and_yarn/lodash-4.17.21"},"gitCommit":{"hash":"517dd1f1e9c154b8cad3762435c7f01eea4d7bb6","date":"2021-12-17 01:37"}},"pageContext":{"id":"10c5b76b-65d5-5cc8-9701-5639695e8de8"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","4106624947","4106624947"]}