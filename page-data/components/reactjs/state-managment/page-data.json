{"componentChunkName":"component---src-templates-docs-js","path":"/components/reactjs/state-managment","result":{"data":{"site":{"siteMetadata":{"title":"Yonisfy","docsLocation":"https://github.com/mohammedelzanaty/yonisfy","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"100d04ab-2875-5db0-9867-631957543402","title":"State Management (hooks)","slug":"/components/reactjs/state-managment"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"State Management (hooks)\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 2,\n  \"tocDepth\": 3\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Info = makeShortcode(\"Info\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"State Management\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In React, state refers to a structure that keeps track of how data changes over time in your application.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The state is an instance of React Component Class can be defined as an object of a set of observable properties that control the behavior of the component. In other words, the State of a component is an object that holds some information that may change over the lifetime of the component.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"State Types\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Let's know first \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://jamesknelson.com/5-types-react-application-state/\"\n  }, \"What are the types of State in React\")), mdx(\"iframe\", {\n    width: \"100%\",\n    height: \"600\",\n    src: \"https://www.youtube.com/embed/vBE3j2PBTGU\",\n    title: \"YouTube video player\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  }), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"I think it will be a better idea after knowing the types of state is to know how to manage it. I will make a simple counter app and build it with different state management logic here's the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/state-management-starter-code-y7ke2\"\n  }, \"starter code sandbox\"), \" \\uD83D\\uDCBB to be able to play with it\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Class-Based State\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"I need from you to think of the state as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"plain object\"), \" which contain the some data. when a state property is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updated\"), \", React \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"re-renders\"), \" the component accordingly.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In class components, there are two ways to initialize state:-\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Constructor function\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it's regular functions introduced in ES6, but there\\u2019s a common agreement to name them with capital letter first\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it's the first function called in a class when it is first instantiated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when a new object is created from the class. Initializing the state within the constructor function allows the state object to be created before React renders the component.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"class ClassComponent extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      count: 0,\\n    };\\n  }\\n  // ...\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Class property\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This enables defining class properties for your JavaScript classes. This can be particularly useful for React components. It combats messy things like binding event handlers in the constructor \\uD83E\\uDD22 u can read more about it from \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://codeburst.io/use-class-properties-to-clean-up-your-classes-and-react-components-93185879f688\"\n  }, \"here\"))))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Both approaches net the same output so it all just comes down to preference. I\\u2019ll be sticking with the constructor function approach in our example. simply I need to create a simple counter with the ability to increment, decrement and reset. we will start basically by defining the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state\"), \" object with simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" property in the constructor function\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"//...\\nclass App extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      count: 0,\\n    };\\n  }\\n  //...\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"the above snippet maily tell react that we have property cause re-rendering every time it changes. so the question now is how we can change it what's the trigger.. as you say we need to define \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"click\"), \" handler to change. Don't worry i will do this for you and attached it to the buttons\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"//..\\nclass App extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      count: 0\\n    };\\n  }\\n\\n+  increment() {\\n+    this.setState({ count: this.state.count + 1 })\\n+  }\\n\\n+  decrement () {\\n+    this.setState({ count: this.state.count - 1 });\\n+  };\\n\\n+ reset() {\\n+    this.setState({ count: 0 });\\n+  }\\n\\n  render() {\\n+    const { count } = this.state;\\n    return (\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">State Management Starter Code</header>\\n        <main>\\n+         <p className=\\\"count\\\">{count}</p>\\n          <div className=\\\"controls\\\">\\n+            <button className=\\\"primary\\\" onClick={this.increment}>Increment</button>\\n+            <button className=\\\"danger\\\" onClick={this.decrement}>Decrement</button>\\n+            <button className=\\\"info\\\" onClick={this.reset}>Reset</button>\\n          </div>\\n        </main>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"now every thing is good and sounds fine but if you try to press any button nothing will happen and you will get errors in the console and there's a reason for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \", as you say it's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" this is the problem. if you not familar with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" in javascript I make a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/watch?v=w3ZwgdgCigM&t=1459s\"\n  }, \"video\"), \" about it watch it now \\uD83D\\uDE09 ... I am waiting you here don't worry\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"so now we need to overcome of the problem of binding a function to a component instance and this can be done by four different ways\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"//..\\nclass App extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      count: 0\\n    };\\n+    // 1. Bind in Constructor (ES2015)\\n+    this.reset = this.reset.bind(this);\\n  }\\n\\n  increment() {\\n    this.setState({ count: this.state.count + 1 })\\n  }\\n\\n+  // 2. Class Properties (Stage 3 Proposal)\\n+  decrement = () => {\\n    this.setState({ count: this.state.count - 1 });\\n  };\\n\\n reset() {\\n    this.setState({ count: 0 });\\n  }\\n\\n  render() {\\n    const { count } = this.state;\\n    return (\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">State Management Starter Code</header>\\n        <main>\\n         <p className=\\\"count\\\">{count}</p>\\n          <div className=\\\"controls\\\">\\n+           {/* 3. Bind in Render */}\\n+           <button className=\\\"primary\\\" onClick={this.increment.bind(this)}>Increment</button>\\n            <button className=\\\"danger\\\" onClick={this.decrement}>Decrement</button>\\n            <button className=\\\"info\\\" onClick={this.reset}>Reset</button>\\n+           {/* 4. Arrow Function in Render */}\\n+           {/*<button className=\\\"primary\\\" onClick={() => this.increment()}>Increment</button>*/}\\n          </div>\\n        </main>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"I see now it's working and you are happy, u can \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/faq-functions.html\"\n  }, \"read more\"), \" but\\nthere's also something I need from you to pay attention to which is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"asynchronicity\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setState\"), \" function for example:-\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"//...\\n increment() {\\n    this.setState({ count: this.state.count + 1 });\\n    this.setState({ count: this.state.count + 1 });\\n    this.setState({ count: this.state.count + 1 });\\n    this.setState({ count: this.state.count + 1 });\\n}\\n//...\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"in the above example the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count -> 1\"), \" because react will queuing up state changes, and will batch them up then efficiently make that changes so underneath it will be something like\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"Object.assign(\\n  {},\\n  yourFirstCallToSetState,\\n  yourSecondCallToSetState,\\n  yourThirdCallToSetState,\\n  yourFourthCallToSetState\\n);\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"which result merge them all and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"the last one win\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"one more thing we need to pay attention to that traditionally we pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"an object\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setState\"), \" but we can pass other things like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"function\"), \" and that function has some arguments the first one will be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state\"), \" and return an object with the new state, one more important think I need to hight here if we do the same multiple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setState\"), \" but with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"function\"), \" version the result will be different\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"//...\\n increment() {\\n    this.setState(prevState => { return { count: prevState.count + 1 } });\\n    this.setState(prevState => { return { count: prevState.count + 1 } });\\n    this.setState(prevState => { return { count: prevState.count + 1 } });\\n    this.setState(prevState => { return { count: prevState.count + 1 } });\\n}\\n//...\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"in the above example the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count -> 4\"), \" because in this case react will not merge them like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"objects\"), \" I know you can compose it but it's not the case don't be cleaver \\uD83D\\uDE04 but function will give us the ability to add \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"condition\"), \" for example like\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"//...\\n increment() {\\n    let max = 5;\\n    this.setState((prevState) => {\\n      if (prevState.count >= max) return;\\n      return { count: prevState.count + 1 };\\n    });\\n//...\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"that's cool ha, but there's a situations u might need to do something after the state is updated. fortunately the react provide a solution for this situation by passing a callback function as second argument for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setState\"), \" method\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"//...\\nincrement() {\\n    let max = 5;\\n    this.setState(\\n      (prevState) => {\\n        if (prevState.count >= max) return;\\n        return { count: prevState.count + 1 };\\n      },\\n      () => {\\n        console.log(\\\"After!\\\", this.state); // Count - 1\\n      }\\n    );\\n    console.log(\\\"Before!\\\", this.state); // Count - 0\\n}\\n//...\\n\")), mdx(Info, {\n    mdxType: \"Info\"\n  }, \"\\u2753 Now after you understand how the use \", mdx(\"strong\", null, \"setState\"), \" it's time to do some work\", \" \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-markdown\"\n  }, \"I need to update the title of the document everytime the state changes. even in increment, decrement or reset\\n\\n// hint: use document.title\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCBB \\uD83D\\uDD25 \\uD83E\\uDDE8 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/state-management-class-based-state-g306h\"\n  }, \"This sandbox represents where are we\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Hooks State\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There is nothing so far \\uD83D\\uDC68\\uD83C\\uDFFB\\u200D\\uD83D\\uDCBB Coming Soon \\uD83E\\uDD0C\\uD83C\\uDFFB \\uD83E\\uDD37\\uD83C\\uDFFB\\u200D\\u2642\\uFE0F\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Reducers\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There is nothing so far \\uD83D\\uDC68\\uD83C\\uDFFB\\u200D\\uD83D\\uDCBB Coming Soon \\uD83E\\uDD0C\\uD83C\\uDFFB \\uD83E\\uDD37\\uD83C\\uDFFB\\u200D\\u2642\\uFE0F\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Context\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There is nothing so far \\uD83D\\uDC68\\uD83C\\uDFFB\\u200D\\uD83D\\uDCBB Coming Soon \\uD83E\\uDD0C\\uD83C\\uDFFB \\uD83E\\uDD37\\uD83C\\uDFFB\\u200D\\u2642\\uFE0F\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Data Fetching\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There is nothing so far \\uD83D\\uDC68\\uD83C\\uDFFB\\u200D\\uD83D\\uDCBB Coming Soon \\uD83E\\uDD0C\\uD83C\\uDFFB \\uD83E\\uDD37\\uD83C\\uDFFB\\u200D\\u2642\\uFE0F\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Thunks\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There is nothing so far \\uD83D\\uDC68\\uD83C\\uDFFB\\u200D\\uD83D\\uDCBB Coming Soon \\uD83E\\uDD0C\\uD83C\\uDFFB \\uD83E\\uDD37\\uD83C\\uDFFB\\u200D\\u2642\\uFE0F\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#state-management","title":"State Management","items":[{"url":"#state-types","title":"State Types"},{"url":"#class-based-state","title":"Class-Based State"},{"url":"#hooks-state","title":"Hooks State"},{"url":"#reducers","title":"Reducers"},{"url":"#context","title":"Context"},{"url":"#data-fetching","title":"Data Fetching"},{"url":"#thunks","title":"Thunks"}]}]},"timeToRead":3,"parent":{"__typename":"File","relativePath":"components/reactjs/state-managment.mdx","fields":{"gitLogLatestAuthorName":"mohammedelzanaty","gitLogLatestAuthorEmail":"mohammedelzanaty129@gmail.com","gitLogLatestDate":"3 months ago"}},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"remotes/origin/dependabot/npm_and_yarn/lodash-4.17.21"},"gitCommit":{"hash":"517dd1f1e9c154b8cad3762435c7f01eea4d7bb6","date":"2021-12-17 01:37"}},"pageContext":{"id":"100d04ab-2875-5db0-9867-631957543402"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","4106624947","4106624947"]}