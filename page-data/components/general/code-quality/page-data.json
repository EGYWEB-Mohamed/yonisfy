{"componentChunkName":"component---src-templates-docs-js","path":"/components/general/code-quality","result":{"data":{"site":{"siteMetadata":{"title":"Yonisfy","docsLocation":"https://github.com/mohammedelzanaty/yonisfy.git","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"fe9ddabc-3c60-5f32-96df-86537263ba61","title":"Code Quality","slug":"/components/general/code-quality"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Code Quality\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 0,\n  \"tocDepth\": 3\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Code Quality\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"It's important to keep quality high when writing code. Or at least that's how I sell ESLint and Prettier to my\\nco-workers. In reality, I'm super lazy and want the machine to do as much work as possible so I can focus more on\\narchitecture and problem-solving and less on syntax and style. While there are many tools that can help you keep code\\nquality high, these two I consider core to my workflow.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/prettier/prettier\"\n  }, \"Prettier\"), \" is an amazing tool from the brain\\nof \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/jlongster\"\n  }, \"James Long\"), \". James, like many of us, was sick of having to constantly worry about the\\nstyle of his code: where to stick indents, how many, when to break lines, etc etc. Coming from languages like Go,\\nReason, or Elm where all that is just taken care of by the tooling for the language, this quickly wears. James did\\nsomething about it and made a tool to take care of it: Prettier.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Prettier is a really fancy pretty printer. It takes the code you write, breaks it down in to an abstract syntax tree (\\nAST) which is just a representation of your code. It then takes that AST, throws away all of your code style you made\\nand prints it back out using a predefined style. While this sounds a little scary, it's actually really cool. Since you\\nno longer have control of the style of your code, you no longer have to think about it at all. Your code is always\\nconsistent, as is the code from the rest of your team. No more bikeshedding!! As I like to put it: if your brain is a\\nprocessor, you get to free up the thread of your brain that worries about code styles and readability: it just happens\\nfor you. Don't like semicolons? Don't write them! It puts them in for you. I \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"love\"), \" Prettier.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Need to tool around a bit with it before you trust it? \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://prettier.io/playground/\"\n  }, \"Go here\"), \". You can see how it\\nworks.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Let's go integrate this into our project. It's \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pretty\"), \" easy (lol.)\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Either install Prettier globally \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install --global prettier\"), \" or replace when I run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prettier\"), \" with (from the root of\\nyour project) \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx prettier\"), \". From there, run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prettier script.js\"), \". This will output the formatted version of your file.\\nIf you want to actually write the file, run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prettier --write script.js\"), \". Go check script.js and see it has been\\nreformatted a bit. I will say for non-JSX React, prettier makes your code less readable. Luckily Prettier supports JSX!\\nWe'll get to that shortly.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Prettier has a few configurations but it's mostly meant to be a tool everyone uses and doesn't argue/bikeshed about the\\nvarious code style rules. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://prettier.io/docs/en/options.html\"\n  }, \"Here they are\"), \". I just use it as is since I'm lazy.\\nPrettier can also understand \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://flow.org/\"\n  }, \"flow\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/\"\n  }, \"TypeScript\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Prettier is great to use with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://code.visualstudio.com/?WT.mc_id=reactintro-github-brholt\"\n  }, \"Visual Studio Code\"), \".\\nJust\\ndownload \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&WT.mc_id=reactintro-github-brholt\"\n  }, \"this extension\"), \"\\n. Pro tip: set it to only run Prettier when it detects a Prettier config file. Makes it so you never have to turn it\\noff. In order to do that, set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prettier.requireConfig\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"editor.formatOnSave\"), \" to true.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So that our tool can know this is a Prettier project, we're going to create a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".prettierrc\"), \" and put\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"in it. This lets everyone know this is a Prettier project that uses the default configuration. You can put other configs\\nhere if you hold strong formatting opinions. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"for example here's mine\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"singleQuote\\\": true,\\n  \\\"printWidth\\\": 100,\\n  \\\"proseWrap\\\": \\\"always\\\",\\n  \\\"trailingComma\\\": \\\"none\\\",\\n  \\\"bracketSpacing\\\": true,\\n  \\\"jsxBracketSameLine\\\": false,\\n  \\\"semi\\\": false\\n}\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"NPM/Yarn Scripts\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So it can be painful to try to remember the various CLI commands to run on your project. You can put CLI commands into\\nit and then run the name of the tag and it'll run that script. Let's go see how that works. Put the following into your\\npackage.json.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"First run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install -D prettier\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-D\"), \" means it's for development only.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"scripts\\\": {\\n    \\\"format\\\": \\\"prettier --write \\\\\\\"src/**/*.{js,jsx}\\\\\\\"\\\"\\n  }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now you can run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn format\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run format\"), \" and it will run that command. This means we don't have to remember\\nthat mess of a command and just have to remember format. Nice, right? We'll be leaning on this a lot during this course.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Alternatives\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There really aren't any for Prettier. The alternative is just not to use a formatter. ESLint's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--fix\"), \" flag would be the\\nclosest thing.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#code-quality","title":"Code Quality","items":[{"url":"#npmyarn-scripts","title":"NPM/Yarn Scripts"},{"url":"#alternatives","title":"Alternatives"}]}]},"timeToRead":3,"parent":{"__typename":"File","relativePath":"components/general/code-quality.md","fields":{"gitLogLatestAuthorName":"mohammedelzanaty","gitLogLatestAuthorEmail":"mohammedelzanaty129@gmail.com","gitLogLatestDate":"8 hours ago"}},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"b4d4e0d291c7cd0780f1095f8bf35e3d1304104a","date":"2021-08-30 10:05"}},"pageContext":{"id":"fe9ddabc-3c60-5f32-96df-86537263ba61"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","4106624947","4106624947"]}